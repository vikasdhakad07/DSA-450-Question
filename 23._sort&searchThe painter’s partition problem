Method:1(dp approach)

import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    int n=sc.nextInt();
	    int k=sc.nextInt();
	    int arr[]=new int[n];
	    for(int i=0;i<n;i++){
	        arr[i]=sc.nextInt();
	    }
		System.out.println(findMax(arr,n,k));
	}
	
	static int sum(int arr[], int from, int to)
{
    int total = 0;
    for (int i = from; i <= to; i++)
        total += arr[i];
    return total;
}
  
static int findMax(int arr[], int n, int k)
{
    int dp[][] = new int[k+1][n+1];
  
    for (int i = 1; i <= n; i++)
        dp[1][i] = sum(arr, 0, i - 1);
  
    for (int i = 1; i <= k; i++)
        dp[i][1] = arr[0];
  
    for (int i = 2; i <= k; i++) { 
        for (int j = 2; j <= n; j++) {
  
            int best = Integer.MAX_VALUE;
 
            for (int p = 1; p <= j; p++)
                best = Math.min(best, Math.max(dp[i - 1][p],
                              sum(arr, p, j - 1)));      
  
            dp[i][j] = best;
        }
    }
  
    return dp[k][n];
}
}
